/* tslint:disable */
/* eslint-disable */
/*
Timmi Timesheet API

Welcome on the documentation for the Timmi Timesheet API.


The version of the OpenAPI document: 1.0
Contact: developers@lucca.fr

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { WorkflowApproveTimesheetsByIdRequest } from '../models';
// @ts-ignore
import { WorkflowApproveTimesheetsByIdRequestTimesheetsInner } from '../models';
// @ts-ignore
import { WorkflowCancelTimesheetByIdRequest } from '../models';
// @ts-ignore
import { WorkflowCancelTimesheetByIdRequestTimesheetsInner } from '../models';
// @ts-ignore
import { WorkflowDenyTimesheetByIdRequest } from '../models';
// @ts-ignore
import { WorkflowDenyTimesheetByIdRequestTimesheetsInner } from '../models';
// @ts-ignore
import { WorkflowInvalidateTimesheetByIdRequest } from '../models';
// @ts-ignore
import { WorkflowSendReminderEmailRequest } from '../models';
// @ts-ignore
import { WorkflowSendReminderEmailRequestTimesheetsInner } from '../models';
// @ts-ignore
import { WorkflowSendReminderEmailResponse } from '../models';
// @ts-ignore
import { WorkflowSubmitTimesheetRequest } from '../models';
// @ts-ignore
import { WorkflowSubmitTimesheetRequestTimesheetsInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WorkflowApi - axios parameter creator
 * @export
 */
export const WorkflowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1approve/post)  Multiple approvals can be required, depending on the configuration.  Once all approvals needed are satisfied, the timesheet status is set to `2: Approved`.  Comprised TimeEntries can only be modified by rejecting the timesheet through the \"invalidate\" operation.
         * @summary Approve Timesheets by id
         * @param {WorkflowApproveTimesheetsByIdRequest} [workflowApproveTimesheetsByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveTimesheetsById: async (workflowApproveTimesheetsByIdRequest?: WorkflowApproveTimesheetsByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/timmi/services/workflow/approve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workflowApproveTimesheetsByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/timmi/services/workflow/approve',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workflowApproveTimesheetsByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1cancel/post)  Cancel a timesheet\'s submission. Can only be achieved by the original submitter as long as the timesheet\'s not approved.  Sets the timesheet status to `3` (rejected).
         * @summary Cancel Timesheets by id
         * @param {WorkflowCancelTimesheetByIdRequest} [workflowCancelTimesheetByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTimesheetById: async (workflowCancelTimesheetByIdRequest?: WorkflowCancelTimesheetByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/timmi/services/workflow/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workflowCancelTimesheetByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/timmi/services/workflow/cancel',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workflowCancelTimesheetByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1deny/post)  Denies a submitted timesheet pending approval. Sets its status to `3` (rejected) and a new timesheet may be submitted for this User and [StartsOn - EndsOn[.  Comment is mandatory.
         * @summary Deny Timesheets by id
         * @param {WorkflowDenyTimesheetByIdRequest} [workflowDenyTimesheetByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denyTimesheetById: async (workflowDenyTimesheetByIdRequest?: WorkflowDenyTimesheetByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/timmi/services/workflow/deny`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workflowDenyTimesheetByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/timmi/services/workflow/deny',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workflowDenyTimesheetByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1invalidate/post)  Rejects an approved timesheet. Sets its status to `3` (rejected). A new timesheet may then be submitted for this User and [StartsOn - EndsOn[.  Comment is mandatory.
         * @summary Invalidate Timesheets by id
         * @param {WorkflowInvalidateTimesheetByIdRequest} [workflowInvalidateTimesheetByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invalidateTimesheetById: async (workflowInvalidateTimesheetByIdRequest?: WorkflowInvalidateTimesheetByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/timmi/services/workflow/invalidate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workflowInvalidateTimesheetByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/timmi/services/workflow/invalidate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workflowInvalidateTimesheetByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remind user of a due timesheet. Sends him/her an email.
         * @summary Remind Timesheets
         * @param {WorkflowSendReminderEmailRequest} [workflowSendReminderEmailRequest] Timesheets are identified by startsAt, endsAt &amp; ownerId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReminderEmail: async (workflowSendReminderEmailRequest?: WorkflowSendReminderEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/timmi/services/workflow/remind`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workflowSendReminderEmailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/timmi/services/workflow/remind',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workflowSendReminderEmailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <!-- theme: warning --> > #### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1submit/post)  Timesheet is created and its status is set to `1` (pending approval). In some cases, timesheet may then be automatically approved (`status: 2`), depending on the application settings.  Once submitted, all comprised TimeEntries for user can no longer be modified. In order to be able to modify them, the timesheet must first be rejected through `cancel`, `deny` or `invalidate` operations (depends on the current timesheet status).
         * @summary Submit Timesheets
         * @param {WorkflowSubmitTimesheetRequest} [workflowSubmitTimesheetRequest] Timesheets are identified by startsAt, endsAt &amp; ownerId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitTimesheet: async (workflowSubmitTimesheetRequest?: WorkflowSubmitTimesheetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/timmi/services/workflow/submit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workflowSubmitTimesheetRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/timmi/services/workflow/submit',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workflowSubmitTimesheetRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowApi - functional programming interface
 * @export
 */
export const WorkflowApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkflowApiAxiosParamCreator(configuration)
    return {
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1approve/post)  Multiple approvals can be required, depending on the configuration.  Once all approvals needed are satisfied, the timesheet status is set to `2: Approved`.  Comprised TimeEntries can only be modified by rejecting the timesheet through the \"invalidate\" operation.
         * @summary Approve Timesheets by id
         * @param {WorkflowApiApproveTimesheetsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveTimesheetsById(requestParameters: WorkflowApiApproveTimesheetsByIdRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowSendReminderEmailResponse>> {
            const workflowApproveTimesheetsByIdRequest: WorkflowApproveTimesheetsByIdRequest = {
                timesheets: requestParameters.timesheets
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveTimesheetsById(workflowApproveTimesheetsByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1cancel/post)  Cancel a timesheet\'s submission. Can only be achieved by the original submitter as long as the timesheet\'s not approved.  Sets the timesheet status to `3` (rejected).
         * @summary Cancel Timesheets by id
         * @param {WorkflowApiCancelTimesheetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelTimesheetById(requestParameters: WorkflowApiCancelTimesheetByIdRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowSendReminderEmailResponse>> {
            const workflowCancelTimesheetByIdRequest: WorkflowCancelTimesheetByIdRequest = {
                timesheets: requestParameters.timesheets
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelTimesheetById(workflowCancelTimesheetByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1deny/post)  Denies a submitted timesheet pending approval. Sets its status to `3` (rejected) and a new timesheet may be submitted for this User and [StartsOn - EndsOn[.  Comment is mandatory.
         * @summary Deny Timesheets by id
         * @param {WorkflowApiDenyTimesheetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async denyTimesheetById(requestParameters: WorkflowApiDenyTimesheetByIdRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowSendReminderEmailResponse>> {
            const workflowDenyTimesheetByIdRequest: WorkflowDenyTimesheetByIdRequest = {
                timesheets: requestParameters.timesheets
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.denyTimesheetById(workflowDenyTimesheetByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1invalidate/post)  Rejects an approved timesheet. Sets its status to `3` (rejected). A new timesheet may then be submitted for this User and [StartsOn - EndsOn[.  Comment is mandatory.
         * @summary Invalidate Timesheets by id
         * @param {WorkflowApiInvalidateTimesheetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invalidateTimesheetById(requestParameters: WorkflowApiInvalidateTimesheetByIdRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowSendReminderEmailResponse>> {
            const workflowInvalidateTimesheetByIdRequest: WorkflowInvalidateTimesheetByIdRequest = {
                timesheets: requestParameters.timesheets
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.invalidateTimesheetById(workflowInvalidateTimesheetByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remind user of a due timesheet. Sends him/her an email.
         * @summary Remind Timesheets
         * @param {WorkflowApiSendReminderEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendReminderEmail(requestParameters: WorkflowApiSendReminderEmailRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowSendReminderEmailResponse>> {
            const workflowSendReminderEmailRequest: WorkflowSendReminderEmailRequest = {
                timesheets: requestParameters.timesheets
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendReminderEmail(workflowSendReminderEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <!-- theme: warning --> > #### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1submit/post)  Timesheet is created and its status is set to `1` (pending approval). In some cases, timesheet may then be automatically approved (`status: 2`), depending on the application settings.  Once submitted, all comprised TimeEntries for user can no longer be modified. In order to be able to modify them, the timesheet must first be rejected through `cancel`, `deny` or `invalidate` operations (depends on the current timesheet status).
         * @summary Submit Timesheets
         * @param {WorkflowApiSubmitTimesheetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitTimesheet(requestParameters: WorkflowApiSubmitTimesheetRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowSendReminderEmailResponse>> {
            const workflowSubmitTimesheetRequest: WorkflowSubmitTimesheetRequest = {
                timesheets: requestParameters.timesheets
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitTimesheet(workflowSubmitTimesheetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkflowApi - factory interface
 * @export
 */
export const WorkflowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkflowApiFp(configuration)
    return {
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1approve/post)  Multiple approvals can be required, depending on the configuration.  Once all approvals needed are satisfied, the timesheet status is set to `2: Approved`.  Comprised TimeEntries can only be modified by rejecting the timesheet through the \"invalidate\" operation.
         * @summary Approve Timesheets by id
         * @param {WorkflowApiApproveTimesheetsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveTimesheetsById(requestParameters: WorkflowApiApproveTimesheetsByIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WorkflowSendReminderEmailResponse> {
            return localVarFp.approveTimesheetsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1cancel/post)  Cancel a timesheet\'s submission. Can only be achieved by the original submitter as long as the timesheet\'s not approved.  Sets the timesheet status to `3` (rejected).
         * @summary Cancel Timesheets by id
         * @param {WorkflowApiCancelTimesheetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTimesheetById(requestParameters: WorkflowApiCancelTimesheetByIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WorkflowSendReminderEmailResponse> {
            return localVarFp.cancelTimesheetById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1deny/post)  Denies a submitted timesheet pending approval. Sets its status to `3` (rejected) and a new timesheet may be submitted for this User and [StartsOn - EndsOn[.  Comment is mandatory.
         * @summary Deny Timesheets by id
         * @param {WorkflowApiDenyTimesheetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denyTimesheetById(requestParameters: WorkflowApiDenyTimesheetByIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WorkflowSendReminderEmailResponse> {
            return localVarFp.denyTimesheetById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1invalidate/post)  Rejects an approved timesheet. Sets its status to `3` (rejected). A new timesheet may then be submitted for this User and [StartsOn - EndsOn[.  Comment is mandatory.
         * @summary Invalidate Timesheets by id
         * @param {WorkflowApiInvalidateTimesheetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invalidateTimesheetById(requestParameters: WorkflowApiInvalidateTimesheetByIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WorkflowSendReminderEmailResponse> {
            return localVarFp.invalidateTimesheetById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remind user of a due timesheet. Sends him/her an email.
         * @summary Remind Timesheets
         * @param {WorkflowApiSendReminderEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReminderEmail(requestParameters: WorkflowApiSendReminderEmailRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WorkflowSendReminderEmailResponse> {
            return localVarFp.sendReminderEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <!-- theme: warning --> > #### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1submit/post)  Timesheet is created and its status is set to `1` (pending approval). In some cases, timesheet may then be automatically approved (`status: 2`), depending on the application settings.  Once submitted, all comprised TimeEntries for user can no longer be modified. In order to be able to modify them, the timesheet must first be rejected through `cancel`, `deny` or `invalidate` operations (depends on the current timesheet status).
         * @summary Submit Timesheets
         * @param {WorkflowApiSubmitTimesheetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitTimesheet(requestParameters: WorkflowApiSubmitTimesheetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WorkflowSendReminderEmailResponse> {
            return localVarFp.submitTimesheet(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveTimesheetsById operation in WorkflowApi.
 * @export
 * @interface WorkflowApiApproveTimesheetsByIdRequest
 */
export type WorkflowApiApproveTimesheetsByIdRequest = {
    
} & WorkflowApproveTimesheetsByIdRequest

/**
 * Request parameters for cancelTimesheetById operation in WorkflowApi.
 * @export
 * @interface WorkflowApiCancelTimesheetByIdRequest
 */
export type WorkflowApiCancelTimesheetByIdRequest = {
    
} & WorkflowCancelTimesheetByIdRequest

/**
 * Request parameters for denyTimesheetById operation in WorkflowApi.
 * @export
 * @interface WorkflowApiDenyTimesheetByIdRequest
 */
export type WorkflowApiDenyTimesheetByIdRequest = {
    
} & WorkflowDenyTimesheetByIdRequest

/**
 * Request parameters for invalidateTimesheetById operation in WorkflowApi.
 * @export
 * @interface WorkflowApiInvalidateTimesheetByIdRequest
 */
export type WorkflowApiInvalidateTimesheetByIdRequest = {
    
} & WorkflowInvalidateTimesheetByIdRequest

/**
 * Request parameters for sendReminderEmail operation in WorkflowApi.
 * @export
 * @interface WorkflowApiSendReminderEmailRequest
 */
export type WorkflowApiSendReminderEmailRequest = {
    
} & WorkflowSendReminderEmailRequest

/**
 * Request parameters for submitTimesheet operation in WorkflowApi.
 * @export
 * @interface WorkflowApiSubmitTimesheetRequest
 */
export type WorkflowApiSubmitTimesheetRequest = {
    
} & WorkflowSubmitTimesheetRequest

/**
 * WorkflowApiGenerated - object-oriented interface
 * @export
 * @class WorkflowApiGenerated
 * @extends {BaseAPI}
 */
export class WorkflowApiGenerated extends BaseAPI {
    /**
     * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1approve/post)  Multiple approvals can be required, depending on the configuration.  Once all approvals needed are satisfied, the timesheet status is set to `2: Approved`.  Comprised TimeEntries can only be modified by rejecting the timesheet through the \"invalidate\" operation.
     * @summary Approve Timesheets by id
     * @param {WorkflowApiApproveTimesheetsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApiGenerated
     */
    public approveTimesheetsById(requestParameters: WorkflowApiApproveTimesheetsByIdRequest = {}, options?: AxiosRequestConfig) {
        return WorkflowApiFp(this.configuration).approveTimesheetsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1cancel/post)  Cancel a timesheet\'s submission. Can only be achieved by the original submitter as long as the timesheet\'s not approved.  Sets the timesheet status to `3` (rejected).
     * @summary Cancel Timesheets by id
     * @param {WorkflowApiCancelTimesheetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApiGenerated
     */
    public cancelTimesheetById(requestParameters: WorkflowApiCancelTimesheetByIdRequest = {}, options?: AxiosRequestConfig) {
        return WorkflowApiFp(this.configuration).cancelTimesheetById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1deny/post)  Denies a submitted timesheet pending approval. Sets its status to `3` (rejected) and a new timesheet may be submitted for this User and [StartsOn - EndsOn[.  Comment is mandatory.
     * @summary Deny Timesheets by id
     * @param {WorkflowApiDenyTimesheetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApiGenerated
     */
    public denyTimesheetById(requestParameters: WorkflowApiDenyTimesheetByIdRequest = {}, options?: AxiosRequestConfig) {
        return WorkflowApiFp(this.configuration).denyTimesheetById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1{id}~1invalidate/post)  Rejects an approved timesheet. Sets its status to `3` (rejected). A new timesheet may then be submitted for this User and [StartsOn - EndsOn[.  Comment is mandatory.
     * @summary Invalidate Timesheets by id
     * @param {WorkflowApiInvalidateTimesheetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApiGenerated
     */
    public invalidateTimesheetById(requestParameters: WorkflowApiInvalidateTimesheetByIdRequest = {}, options?: AxiosRequestConfig) {
        return WorkflowApiFp(this.configuration).invalidateTimesheetById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remind user of a due timesheet. Sends him/her an email.
     * @summary Remind Timesheets
     * @param {WorkflowApiSendReminderEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApiGenerated
     */
    public sendReminderEmail(requestParameters: WorkflowApiSendReminderEmailRequest = {}, options?: AxiosRequestConfig) {
        return WorkflowApiFp(this.configuration).sendReminderEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <!-- theme: warning --> > #### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](../reference/Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1api~1timesheets~1submit/post)  Timesheet is created and its status is set to `1` (pending approval). In some cases, timesheet may then be automatically approved (`status: 2`), depending on the application settings.  Once submitted, all comprised TimeEntries for user can no longer be modified. In order to be able to modify them, the timesheet must first be rejected through `cancel`, `deny` or `invalidate` operations (depends on the current timesheet status).
     * @summary Submit Timesheets
     * @param {WorkflowApiSubmitTimesheetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApiGenerated
     */
    public submitTimesheet(requestParameters: WorkflowApiSubmitTimesheetRequest = {}, options?: AxiosRequestConfig) {
        return WorkflowApiFp(this.configuration).submitTimesheet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
