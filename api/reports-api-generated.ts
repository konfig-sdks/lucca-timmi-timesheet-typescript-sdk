/* tslint:disable */
/* eslint-disable */
/*
Timmi Timesheet API

Welcome on the documentation for the Timmi Timesheet API.


The version of the OpenAPI document: 1.0
Contact: developers@lucca.fr

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Report } from '../models';
// @ts-ignore
import { ReportColumnsInner } from '../models';
// @ts-ignore
import { ReportFiltersInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <!-- theme: info --> > This endpoint does not adhere to the \"v3 API endpoints\" principles. The \"fields\" query parameter is not supported, but all fields are systematically returned.  A report can only be created based on an existing report-template. So you first need to retrieve the report-template unique identifier `templateId`.
         * @summary Create a new Report
         * @param {Report} [report] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBasedOnTemplate: async (report?: Report, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/timmi-timesheet/api/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: report,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/timmi-timesheet/api/reports',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(report, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <!-- theme: info --> > This endpoint does not adhere to the \"v3 API endpoints\" principles.  Download a report content as an CSV file `.csv`.  Column delimiter and numbers formating depends on the authentified user\'s culture.
         * @summary Download Report as CSV
         * @param {number} reportId Identifier of the report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadCsvReport: async (reportId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('downloadCsvReport', 'reportId', reportId)
            const localVarPath = `/timmi-timesheet/api/reports/{reportId}/download-csv`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId !== undefined ? reportId : `-reportId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/timmi-timesheet/api/reports/{reportId}/download-csv',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <!-- theme: info --> > This endpoint does not adhere to the \"v3 API endpoints\" principles.  Download a report content as an Excel file `.xls`.  Column delimiter and numbers formating depends on the authentified user\'s culture.
         * @summary Download Report as Excel
         * @param {number} reportId Identifier of the report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadExcelReport: async (reportId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('downloadExcelReport', 'reportId', reportId)
            const localVarPath = `/timmi-timesheet/api/reports/{reportId}/download-excel`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId !== undefined ? reportId : `-reportId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/timmi-timesheet/api/reports/{reportId}/download-excel',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * <!-- theme: info --> > This endpoint does not adhere to the \"v3 API endpoints\" principles. The \"fields\" query parameter is not supported, but all fields are systematically returned.  A report can only be created based on an existing report-template. So you first need to retrieve the report-template unique identifier `templateId`.
         * @summary Create a new Report
         * @param {ReportsApiCreateBasedOnTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBasedOnTemplate(requestParameters: ReportsApiCreateBasedOnTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const report: Report = {
                id: requestParameters.id,
                status: requestParameters.status,
                name: requestParameters.name,
                templateId: requestParameters.templateId,
                startsOn: requestParameters.startsOn,
                endsOn: requestParameters.endsOn,
                filters: requestParameters.filters,
                columns: requestParameters.columns
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBasedOnTemplate(report, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <!-- theme: info --> > This endpoint does not adhere to the \"v3 API endpoints\" principles.  Download a report content as an CSV file `.csv`.  Column delimiter and numbers formating depends on the authentified user\'s culture.
         * @summary Download Report as CSV
         * @param {ReportsApiDownloadCsvReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadCsvReport(requestParameters: ReportsApiDownloadCsvReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadCsvReport(requestParameters.reportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <!-- theme: info --> > This endpoint does not adhere to the \"v3 API endpoints\" principles.  Download a report content as an Excel file `.xls`.  Column delimiter and numbers formating depends on the authentified user\'s culture.
         * @summary Download Report as Excel
         * @param {ReportsApiDownloadExcelReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadExcelReport(requestParameters: ReportsApiDownloadExcelReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadExcelReport(requestParameters.reportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * <!-- theme: info --> > This endpoint does not adhere to the \"v3 API endpoints\" principles. The \"fields\" query parameter is not supported, but all fields are systematically returned.  A report can only be created based on an existing report-template. So you first need to retrieve the report-template unique identifier `templateId`.
         * @summary Create a new Report
         * @param {ReportsApiCreateBasedOnTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBasedOnTemplate(requestParameters: ReportsApiCreateBasedOnTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<Report> {
            return localVarFp.createBasedOnTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <!-- theme: info --> > This endpoint does not adhere to the \"v3 API endpoints\" principles.  Download a report content as an CSV file `.csv`.  Column delimiter and numbers formating depends on the authentified user\'s culture.
         * @summary Download Report as CSV
         * @param {ReportsApiDownloadCsvReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadCsvReport(requestParameters: ReportsApiDownloadCsvReportRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.downloadCsvReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <!-- theme: info --> > This endpoint does not adhere to the \"v3 API endpoints\" principles.  Download a report content as an Excel file `.xls`.  Column delimiter and numbers formating depends on the authentified user\'s culture.
         * @summary Download Report as Excel
         * @param {ReportsApiDownloadExcelReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadExcelReport(requestParameters: ReportsApiDownloadExcelReportRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.downloadExcelReport(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBasedOnTemplate operation in ReportsApi.
 * @export
 * @interface ReportsApiCreateBasedOnTemplateRequest
 */
export type ReportsApiCreateBasedOnTemplateRequest = {
    
} & Report

/**
 * Request parameters for downloadCsvReport operation in ReportsApi.
 * @export
 * @interface ReportsApiDownloadCsvReportRequest
 */
export type ReportsApiDownloadCsvReportRequest = {
    
    /**
    * Identifier of the report.
    * @type {number}
    * @memberof ReportsApiDownloadCsvReport
    */
    readonly reportId: number
    
}

/**
 * Request parameters for downloadExcelReport operation in ReportsApi.
 * @export
 * @interface ReportsApiDownloadExcelReportRequest
 */
export type ReportsApiDownloadExcelReportRequest = {
    
    /**
    * Identifier of the report.
    * @type {number}
    * @memberof ReportsApiDownloadExcelReport
    */
    readonly reportId: number
    
}

/**
 * ReportsApiGenerated - object-oriented interface
 * @export
 * @class ReportsApiGenerated
 * @extends {BaseAPI}
 */
export class ReportsApiGenerated extends BaseAPI {
    /**
     * <!-- theme: info --> > This endpoint does not adhere to the \"v3 API endpoints\" principles. The \"fields\" query parameter is not supported, but all fields are systematically returned.  A report can only be created based on an existing report-template. So you first need to retrieve the report-template unique identifier `templateId`.
     * @summary Create a new Report
     * @param {ReportsApiCreateBasedOnTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public createBasedOnTemplate(requestParameters: ReportsApiCreateBasedOnTemplateRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).createBasedOnTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <!-- theme: info --> > This endpoint does not adhere to the \"v3 API endpoints\" principles.  Download a report content as an CSV file `.csv`.  Column delimiter and numbers formating depends on the authentified user\'s culture.
     * @summary Download Report as CSV
     * @param {ReportsApiDownloadCsvReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public downloadCsvReport(requestParameters: ReportsApiDownloadCsvReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).downloadCsvReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <!-- theme: info --> > This endpoint does not adhere to the \"v3 API endpoints\" principles.  Download a report content as an Excel file `.xls`.  Column delimiter and numbers formating depends on the authentified user\'s culture.
     * @summary Download Report as Excel
     * @param {ReportsApiDownloadExcelReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public downloadExcelReport(requestParameters: ReportsApiDownloadExcelReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).downloadExcelReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
