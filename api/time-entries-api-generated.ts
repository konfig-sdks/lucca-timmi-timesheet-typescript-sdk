/* tslint:disable */
/* eslint-disable */
/*
Timmi Timesheet API

Welcome on the documentation for the Timmi Timesheet API.


The version of the OpenAPI document: 1.0
Contact: developers@lucca.fr

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AxisSection } from '../models';
// @ts-ignore
import { TimeEntriesCreateMultipleRequest } from '../models';
// @ts-ignore
import { TimeEntriesCreateMultipleResponse } from '../models';
// @ts-ignore
import { TimeEntriesDeleteMultipleRequestInner } from '../models';
// @ts-ignore
import { TimeEntriesDeleteMultipleResponse } from '../models';
// @ts-ignore
import { TimeEntriesGetByIdResponse } from '../models';
// @ts-ignore
import { TimeEntriesListTimeEntriesResponse } from '../models';
// @ts-ignore
import { TimeEntriesUpdateByIdResponse } from '../models';
// @ts-ignore
import { TimeEntriesUpdateMultipleRequest } from '../models';
// @ts-ignore
import { TimeEntriesUpdateMultipleResponse } from '../models';
// @ts-ignore
import { TimeEntry } from '../models';
// @ts-ignore
import { TimeEntryComment } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TimeEntriesApi - axios parameter creator
 * @export
 */
export const TimeEntriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  You can create a single or multiple TimeEntries for a given user.  Beware, a new TimeEntry cannot intersect with a submitted or approved timesheet.
         * @summary Create new TimeEntries
         * @param {TimeEntriesCreateMultipleRequest} [timeEntriesCreateMultipleRequest] Create a single of multiple TimeEntry (toggle body type).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultiple: async (timeEntriesCreateMultipleRequest?: TimeEntriesCreateMultipleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/timeentries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeEntriesCreateMultipleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/timeentries',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeEntriesCreateMultipleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Delete one or several TimeEntries. The \"id\" field of each TimeEntry must be sent and correspond to an existing TimeEntry.
         * @summary Delete multiple TimeEntries
         * @param {Array<TimeEntriesDeleteMultipleRequestInner>} [timeEntriesDeleteMultipleRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMultiple: async (timeEntriesDeleteMultipleRequestInner?: Array<TimeEntriesDeleteMultipleRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/timeentries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeEntriesDeleteMultipleRequestInner,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/timeentries',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeEntriesDeleteMultipleRequestInner, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single TimeEntry identified by its unique identifier.
         * @summary Get a TimeEntry by id
         * @param {number} timeEntryId Identifier of the TimeEntry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (timeEntryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeEntryId' is not null or undefined
            assertParamExists('getById', 'timeEntryId', timeEntryId)
            const localVarPath = `/api/v3/timeentries/{timeEntryId}`
                .replace(`{${"timeEntryId"}}`, encodeURIComponent(String(timeEntryId !== undefined ? timeEntryId : `-timeEntryId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/timeentries/{timeEntryId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of TimeEntries.  The `startsAt` query parameter can operate comparisons with a given date-time value: - `?startsAt=2021-01-01`: strict equality. - `?startsAt=since,2021-01-01`: greater than or equal. - `?startsAt=until,2021-01-01`: lower than or equal. - `?startsAt=between,2021-01-01,2021-01-31`: comprised between two dates.  To retrieve the total count of all TimeEntries (on all pages), please include the field `?field=collection.count`.
         * @summary List TimeEntries
         * @param {string} paging {offset},{limit}. Defaults to 0,1000.
         * @param {Array<any>} [ownerId] User\&#39;s identifier
         * @param {string} [startsAt] {comparator},{date-time}
         * @param {Array<any>} [axisSectionsId] Filter on a comma-separated list of AxisSections identifiers.
         * @param {Array<any>} [axisSectionsCode] Filter on a comma-separated list of AxisSections codes.
         * @param {string} [modifiedAt] {comparator},{date-time}
         * @param {string} [archivedAt] {comparator},{date-time}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeEntries: async (paging: string, ownerId?: Array<any>, startsAt?: string, axisSectionsId?: Array<any>, axisSectionsCode?: Array<any>, modifiedAt?: string, archivedAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paging' is not null or undefined
            assertParamExists('listTimeEntries', 'paging', paging)
            const localVarPath = `/api/v3/timeentries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })
            if (paging !== undefined) {
                localVarQueryParameter['paging'] = paging;
            }

            if (ownerId) {
                localVarQueryParameter['ownerId'] = ownerId;
            }

            if (startsAt !== undefined) {
                localVarQueryParameter['startsAt'] = startsAt;
            }

            if (axisSectionsId) {
                localVarQueryParameter['axisSections.id'] = axisSectionsId;
            }

            if (axisSectionsCode) {
                localVarQueryParameter['axisSections.code'] = axisSectionsCode;
            }

            if (modifiedAt !== undefined) {
                localVarQueryParameter['modifiedAt'] = modifiedAt;
            }

            if (archivedAt !== undefined) {
                localVarQueryParameter['archivedAt'] = archivedAt;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/timeentries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Delete a single TimeEntry. Deletion is irrevocable.
         * @summary Delete a TimeEntry by id
         * @param {number} timeEntryId Identifier of the TimeEntry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (timeEntryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeEntryId' is not null or undefined
            assertParamExists('removeById', 'timeEntryId', timeEntryId)
            const localVarPath = `/api/v3/timeentries/{timeEntryId}`
                .replace(`{${"timeEntryId"}}`, encodeURIComponent(String(timeEntryId !== undefined ? timeEntryId : `-timeEntryId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/timeentries/{timeEntryId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Update fields of a single TimeEntry identified by its unique id.
         * @summary Update a TimeEntry by id
         * @param {number} timeEntryId Identifier of the TimeEntry.
         * @param {TimeEntry} [timeEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (timeEntryId: number, timeEntry?: TimeEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeEntryId' is not null or undefined
            assertParamExists('updateById', 'timeEntryId', timeEntryId)
            const localVarPath = `/api/v3/timeentries/{timeEntryId}`
                .replace(`{${"timeEntryId"}}`, encodeURIComponent(String(timeEntryId !== undefined ? timeEntryId : `-timeEntryId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeEntry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/timeentries/{timeEntryId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeEntry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Update one or several TimeEntries. The \"id\" field must be sent and correspond to an existing TimeEntry.
         * @summary Update multiple TimeEntries
         * @param {TimeEntriesUpdateMultipleRequest} [timeEntriesUpdateMultipleRequest] You can either update a single or multiple TimeEntries. Pick the correct body type accordingly.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateMultiple: async (timeEntriesUpdateMultipleRequest?: TimeEntriesUpdateMultipleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/timeentries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeEntriesUpdateMultipleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/timeentries',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeEntriesUpdateMultipleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeEntriesApi - functional programming interface
 * @export
 */
export const TimeEntriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeEntriesApiAxiosParamCreator(configuration)
    return {
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  You can create a single or multiple TimeEntries for a given user.  Beware, a new TimeEntry cannot intersect with a submitted or approved timesheet.
         * @summary Create new TimeEntries
         * @param {TimeEntriesApiCreateMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMultiple(requestParameters: TimeEntriesApiCreateMultipleRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeEntriesCreateMultipleResponse>> {
            const timeEntriesCreateMultipleRequest: TimeEntriesCreateMultipleRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMultiple(timeEntriesCreateMultipleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Delete one or several TimeEntries. The \"id\" field of each TimeEntry must be sent and correspond to an existing TimeEntry.
         * @summary Delete multiple TimeEntries
         * @param {TimeEntriesApiDeleteMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMultiple(requestParameters: TimeEntriesApiDeleteMultipleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeEntriesDeleteMultipleRequestInner: Array<TimeEntriesDeleteMultipleRequestInner> = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMultiple(timeEntriesDeleteMultipleRequestInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a single TimeEntry identified by its unique identifier.
         * @summary Get a TimeEntry by id
         * @param {TimeEntriesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: TimeEntriesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeEntriesGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.timeEntryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of TimeEntries.  The `startsAt` query parameter can operate comparisons with a given date-time value: - `?startsAt=2021-01-01`: strict equality. - `?startsAt=since,2021-01-01`: greater than or equal. - `?startsAt=until,2021-01-01`: lower than or equal. - `?startsAt=between,2021-01-01,2021-01-31`: comprised between two dates.  To retrieve the total count of all TimeEntries (on all pages), please include the field `?field=collection.count`.
         * @summary List TimeEntries
         * @param {TimeEntriesApiListTimeEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTimeEntries(requestParameters: TimeEntriesApiListTimeEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeEntriesListTimeEntriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTimeEntries(requestParameters.paging, requestParameters.ownerId, requestParameters.startsAt, requestParameters.axisSectionsId, requestParameters.axisSectionsCode, requestParameters.modifiedAt, requestParameters.archivedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Delete a single TimeEntry. Deletion is irrevocable.
         * @summary Delete a TimeEntry by id
         * @param {TimeEntriesApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: TimeEntriesApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.timeEntryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Update fields of a single TimeEntry identified by its unique id.
         * @summary Update a TimeEntry by id
         * @param {TimeEntriesApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: TimeEntriesApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeEntriesUpdateByIdResponse>> {
            const timeEntry: TimeEntry = {
                id: requestParameters.id,
                startsAt: requestParameters.startsAt,
                duration: requestParameters.duration,
                unit: requestParameters.unit,
                endsAt: requestParameters.endsAt,
                ownerId: requestParameters.ownerId,
                authorId: requestParameters.authorId,
                createdAt: requestParameters.createdAt,
                creationSource: requestParameters.creationSource,
                modifierId: requestParameters.modifierId,
                modifiedAt: requestParameters.modifiedAt,
                layer: requestParameters.layer,
                axisSections: requestParameters.axisSections,
                comment: requestParameters.comment,
                timeTypeId: requestParameters.timeTypeId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.timeEntryId, timeEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Update one or several TimeEntries. The \"id\" field must be sent and correspond to an existing TimeEntry.
         * @summary Update multiple TimeEntries
         * @param {TimeEntriesApiUpdateMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async updateMultiple(requestParameters: TimeEntriesApiUpdateMultipleRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeEntriesUpdateMultipleResponse>> {
            const timeEntriesUpdateMultipleRequest: TimeEntriesUpdateMultipleRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMultiple(timeEntriesUpdateMultipleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeEntriesApi - factory interface
 * @export
 */
export const TimeEntriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeEntriesApiFp(configuration)
    return {
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  You can create a single or multiple TimeEntries for a given user.  Beware, a new TimeEntry cannot intersect with a submitted or approved timesheet.
         * @summary Create new TimeEntries
         * @param {TimeEntriesApiCreateMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultiple(requestParameters: TimeEntriesApiCreateMultipleRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TimeEntriesCreateMultipleResponse> {
            return localVarFp.createMultiple(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Delete one or several TimeEntries. The \"id\" field of each TimeEntry must be sent and correspond to an existing TimeEntry.
         * @summary Delete multiple TimeEntries
         * @param {TimeEntriesApiDeleteMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMultiple(requestParameters: TimeEntriesApiDeleteMultipleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMultiple(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single TimeEntry identified by its unique identifier.
         * @summary Get a TimeEntry by id
         * @param {TimeEntriesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: TimeEntriesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TimeEntriesGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of TimeEntries.  The `startsAt` query parameter can operate comparisons with a given date-time value: - `?startsAt=2021-01-01`: strict equality. - `?startsAt=since,2021-01-01`: greater than or equal. - `?startsAt=until,2021-01-01`: lower than or equal. - `?startsAt=between,2021-01-01,2021-01-31`: comprised between two dates.  To retrieve the total count of all TimeEntries (on all pages), please include the field `?field=collection.count`.
         * @summary List TimeEntries
         * @param {TimeEntriesApiListTimeEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeEntries(requestParameters: TimeEntriesApiListTimeEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<TimeEntriesListTimeEntriesResponse> {
            return localVarFp.listTimeEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Delete a single TimeEntry. Deletion is irrevocable.
         * @summary Delete a TimeEntry by id
         * @param {TimeEntriesApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: TimeEntriesApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Update fields of a single TimeEntry identified by its unique id.
         * @summary Update a TimeEntry by id
         * @param {TimeEntriesApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: TimeEntriesApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TimeEntriesUpdateByIdResponse> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Update one or several TimeEntries. The \"id\" field must be sent and correspond to an existing TimeEntry.
         * @summary Update multiple TimeEntries
         * @param {TimeEntriesApiUpdateMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateMultiple(requestParameters: TimeEntriesApiUpdateMultipleRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TimeEntriesUpdateMultipleResponse> {
            return localVarFp.updateMultiple(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMultiple operation in TimeEntriesApi.
 * @export
 * @interface TimeEntriesApiCreateMultipleRequest
 */
export type TimeEntriesApiCreateMultipleRequest = {
    
} & TimeEntriesCreateMultipleRequest

/**
 * Request parameters for deleteMultiple operation in TimeEntriesApi.
 * @export
 * @interface TimeEntriesApiDeleteMultipleRequest
 */
export type TimeEntriesApiDeleteMultipleRequest = Array<TimeEntriesDeleteMultipleRequestInner>

/**
 * Request parameters for getById operation in TimeEntriesApi.
 * @export
 * @interface TimeEntriesApiGetByIdRequest
 */
export type TimeEntriesApiGetByIdRequest = {
    
    /**
    * Identifier of the TimeEntry.
    * @type {number}
    * @memberof TimeEntriesApiGetById
    */
    readonly timeEntryId: number
    
}

/**
 * Request parameters for listTimeEntries operation in TimeEntriesApi.
 * @export
 * @interface TimeEntriesApiListTimeEntriesRequest
 */
export type TimeEntriesApiListTimeEntriesRequest = {
    
    /**
    * {offset},{limit}. Defaults to 0,1000.
    * @type {string}
    * @memberof TimeEntriesApiListTimeEntries
    */
    readonly paging: string
    
    /**
    * User\'s identifier
    * @type {Array<any>}
    * @memberof TimeEntriesApiListTimeEntries
    */
    readonly ownerId?: Array<any>
    
    /**
    * {comparator},{date-time}
    * @type {string}
    * @memberof TimeEntriesApiListTimeEntries
    */
    readonly startsAt?: string
    
    /**
    * Filter on a comma-separated list of AxisSections identifiers.
    * @type {Array<any>}
    * @memberof TimeEntriesApiListTimeEntries
    */
    readonly axisSectionsId?: Array<any>
    
    /**
    * Filter on a comma-separated list of AxisSections codes.
    * @type {Array<any>}
    * @memberof TimeEntriesApiListTimeEntries
    */
    readonly axisSectionsCode?: Array<any>
    
    /**
    * {comparator},{date-time}
    * @type {string}
    * @memberof TimeEntriesApiListTimeEntries
    */
    readonly modifiedAt?: string
    
    /**
    * {comparator},{date-time}
    * @type {string}
    * @memberof TimeEntriesApiListTimeEntries
    */
    readonly archivedAt?: string
    
}

/**
 * Request parameters for removeById operation in TimeEntriesApi.
 * @export
 * @interface TimeEntriesApiRemoveByIdRequest
 */
export type TimeEntriesApiRemoveByIdRequest = {
    
    /**
    * Identifier of the TimeEntry.
    * @type {number}
    * @memberof TimeEntriesApiRemoveById
    */
    readonly timeEntryId: number
    
}

/**
 * Request parameters for updateById operation in TimeEntriesApi.
 * @export
 * @interface TimeEntriesApiUpdateByIdRequest
 */
export type TimeEntriesApiUpdateByIdRequest = {
    
    /**
    * Identifier of the TimeEntry.
    * @type {number}
    * @memberof TimeEntriesApiUpdateById
    */
    readonly timeEntryId: number
    
} & TimeEntry

/**
 * Request parameters for updateMultiple operation in TimeEntriesApi.
 * @export
 * @interface TimeEntriesApiUpdateMultipleRequest
 */
export type TimeEntriesApiUpdateMultipleRequest = {
    
} & TimeEntriesUpdateMultipleRequest

/**
 * TimeEntriesApiGenerated - object-oriented interface
 * @export
 * @class TimeEntriesApiGenerated
 * @extends {BaseAPI}
 */
export class TimeEntriesApiGenerated extends BaseAPI {
    /**
     * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  You can create a single or multiple TimeEntries for a given user.  Beware, a new TimeEntry cannot intersect with a submitted or approved timesheet.
     * @summary Create new TimeEntries
     * @param {TimeEntriesApiCreateMultipleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeEntriesApiGenerated
     */
    public createMultiple(requestParameters: TimeEntriesApiCreateMultipleRequest = {}, options?: AxiosRequestConfig) {
        return TimeEntriesApiFp(this.configuration).createMultiple(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Delete one or several TimeEntries. The \"id\" field of each TimeEntry must be sent and correspond to an existing TimeEntry.
     * @summary Delete multiple TimeEntries
     * @param {TimeEntriesApiDeleteMultipleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeEntriesApiGenerated
     */
    public deleteMultiple(requestParameters: TimeEntriesApiDeleteMultipleRequest, options?: AxiosRequestConfig) {
        return TimeEntriesApiFp(this.configuration).deleteMultiple(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a single TimeEntry identified by its unique identifier.
     * @summary Get a TimeEntry by id
     * @param {TimeEntriesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeEntriesApiGenerated
     */
    public getById(requestParameters: TimeEntriesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return TimeEntriesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of TimeEntries.  The `startsAt` query parameter can operate comparisons with a given date-time value: - `?startsAt=2021-01-01`: strict equality. - `?startsAt=since,2021-01-01`: greater than or equal. - `?startsAt=until,2021-01-01`: lower than or equal. - `?startsAt=between,2021-01-01,2021-01-31`: comprised between two dates.  To retrieve the total count of all TimeEntries (on all pages), please include the field `?field=collection.count`.
     * @summary List TimeEntries
     * @param {TimeEntriesApiListTimeEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeEntriesApiGenerated
     */
    public listTimeEntries(requestParameters: TimeEntriesApiListTimeEntriesRequest, options?: AxiosRequestConfig) {
        return TimeEntriesApiFp(this.configuration).listTimeEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Delete a single TimeEntry. Deletion is irrevocable.
     * @summary Delete a TimeEntry by id
     * @param {TimeEntriesApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeEntriesApiGenerated
     */
    public removeById(requestParameters: TimeEntriesApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return TimeEntriesApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Update fields of a single TimeEntry identified by its unique id.
     * @summary Update a TimeEntry by id
     * @param {TimeEntriesApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeEntriesApiGenerated
     */
    public updateById(requestParameters: TimeEntriesApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return TimeEntriesApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <!-- theme: warning -->  >#### Warning > This endpoint will soon be deprecated, please use [Timmi Timesheet v4 API](Timmi-Timesheet.yaml/paths/~1timmi-timesheet~1services~1time-entries/put)  Update one or several TimeEntries. The \"id\" field must be sent and correspond to an existing TimeEntry.
     * @summary Update multiple TimeEntries
     * @param {TimeEntriesApiUpdateMultipleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TimeEntriesApiGenerated
     */
    public updateMultiple(requestParameters: TimeEntriesApiUpdateMultipleRequest = {}, options?: AxiosRequestConfig) {
        return TimeEntriesApiFp(this.configuration).updateMultiple(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
