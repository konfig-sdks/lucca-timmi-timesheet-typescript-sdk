/* tslint:disable */
/* eslint-disable */
/*
Timmi Timesheet API

Welcome on the documentation for the Timmi Timesheet API.


The version of the OpenAPI document: 1.0
Contact: developers@lucca.fr

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OwnerId } from '../models';
// @ts-ignore
import { Status } from '../models';
// @ts-ignore
import { TimeEntriesDeleteMultipleResponse } from '../models';
// @ts-ignore
import { TimesheetsListDueResponse } from '../models';
// @ts-ignore
import { TimesheetsListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TimesheetsApi - axios parameter creator
 * @export
 */
export const TimesheetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all timesheets satisfying query filters.
         * @summary List timesheets
         * @param {Array<OwnerId>} [ownerId] User\&#39;s identifier.
         * @param {string} [startsOn] Filter on the start date of the timesheet.
         * @param {Array<Status>} [status] Filter on the timesheet workflow status.
         * @param {string} [endsOn] Filter on the end date of the timesheet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (ownerId?: Array<OwnerId>, startsOn?: string, status?: Array<Status>, endsOn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/timmitimesheets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })
            if (ownerId) {
                localVarQueryParameter['ownerId'] = ownerId;
            }

            if (startsOn !== undefined) {
                localVarQueryParameter['startsOn'] = startsOn;
            }

            if (status) {
                localVarQueryParameter['status'] = status;
            }

            if (endsOn !== undefined) {
                localVarQueryParameter['endsOn'] = endsOn;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/timmitimesheets',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List timesheet that are not yet submitted (status: 0).  You must filter on either `ownerIds`, `managerIds` or `legalEntityIds`. As long as a timesheet is not submitted, its unique identifier is equal to zero.
         * @summary List due timesheets
         * @param {Array<number>} [ownerIds] List unique identifier of submitters.
         * @param {Array<number>} [legalEntityIds] List unique identifier of submitters\&#39; legal establishments.
         * @param {Array<number>} [managerIds] List unique identifier of submitters\&#39; manager.
         * @param {string | Date} [start] Prevent older timesheets to be returned.
         * @param {string | Date} [end] Prevent earlier timesheets to be returned (date excluded). Defaults to today when not sent.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDue: async (ownerIds?: Array<number>, legalEntityIds?: Array<number>, managerIds?: Array<number>, start?: string | Date, end?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/timmitimesheets/remindable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })
            if (ownerIds) {
                localVarQueryParameter['ownerIds'] = ownerIds;
            }

            if (legalEntityIds) {
                localVarQueryParameter['legalEntityIds'] = legalEntityIds;
            }

            if (managerIds) {
                localVarQueryParameter['managerIds'] = managerIds;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/timmitimesheets/remindable',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimesheetsApi - functional programming interface
 * @export
 */
export const TimesheetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimesheetsApiAxiosParamCreator(configuration)
    return {
        /**
         * List all timesheets satisfying query filters.
         * @summary List timesheets
         * @param {TimesheetsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: TimesheetsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimesheetsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.ownerId, requestParameters.startsOn, requestParameters.status, requestParameters.endsOn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List timesheet that are not yet submitted (status: 0).  You must filter on either `ownerIds`, `managerIds` or `legalEntityIds`. As long as a timesheet is not submitted, its unique identifier is equal to zero.
         * @summary List due timesheets
         * @param {TimesheetsApiListDueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDue(requestParameters: TimesheetsApiListDueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimesheetsListDueResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDue(requestParameters.ownerIds, requestParameters.legalEntityIds, requestParameters.managerIds, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimesheetsApi - factory interface
 * @export
 */
export const TimesheetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimesheetsApiFp(configuration)
    return {
        /**
         * List all timesheets satisfying query filters.
         * @summary List timesheets
         * @param {TimesheetsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: TimesheetsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<TimesheetsListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List timesheet that are not yet submitted (status: 0).  You must filter on either `ownerIds`, `managerIds` or `legalEntityIds`. As long as a timesheet is not submitted, its unique identifier is equal to zero.
         * @summary List due timesheets
         * @param {TimesheetsApiListDueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDue(requestParameters: TimesheetsApiListDueRequest, options?: AxiosRequestConfig): AxiosPromise<TimesheetsListDueResponse> {
            return localVarFp.listDue(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for list operation in TimesheetsApi.
 * @export
 * @interface TimesheetsApiListRequest
 */
export type TimesheetsApiListRequest = {
    
    /**
    * User\'s identifier.
    * @type {Array<OwnerId>}
    * @memberof TimesheetsApiList
    */
    readonly ownerId?: Array<OwnerId>
    
    /**
    * Filter on the start date of the timesheet.
    * @type {string}
    * @memberof TimesheetsApiList
    */
    readonly startsOn?: string
    
    /**
    * Filter on the timesheet workflow status.
    * @type {Array<Status>}
    * @memberof TimesheetsApiList
    */
    readonly status?: Array<Status>
    
    /**
    * Filter on the end date of the timesheet.
    * @type {string}
    * @memberof TimesheetsApiList
    */
    readonly endsOn?: string
    
}

/**
 * Request parameters for listDue operation in TimesheetsApi.
 * @export
 * @interface TimesheetsApiListDueRequest
 */
export type TimesheetsApiListDueRequest = {
    
    /**
    * List unique identifier of submitters.
    * @type {Array<number>}
    * @memberof TimesheetsApiListDue
    */
    readonly ownerIds?: Array<number>
    
    /**
    * List unique identifier of submitters\' legal establishments.
    * @type {Array<number>}
    * @memberof TimesheetsApiListDue
    */
    readonly legalEntityIds?: Array<number>
    
    /**
    * List unique identifier of submitters\' manager.
    * @type {Array<number>}
    * @memberof TimesheetsApiListDue
    */
    readonly managerIds?: Array<number>
    
    /**
    * Prevent older timesheets to be returned.
    * @type {string | Date}
    * @memberof TimesheetsApiListDue
    */
    readonly start?: string | Date
    
    /**
    * Prevent earlier timesheets to be returned (date excluded). Defaults to today when not sent.
    * @type {string | Date}
    * @memberof TimesheetsApiListDue
    */
    readonly end?: string | Date
    
}

/**
 * TimesheetsApiGenerated - object-oriented interface
 * @export
 * @class TimesheetsApiGenerated
 * @extends {BaseAPI}
 */
export class TimesheetsApiGenerated extends BaseAPI {
    /**
     * List all timesheets satisfying query filters.
     * @summary List timesheets
     * @param {TimesheetsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetsApiGenerated
     */
    public list(requestParameters: TimesheetsApiListRequest, options?: AxiosRequestConfig) {
        return TimesheetsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List timesheet that are not yet submitted (status: 0).  You must filter on either `ownerIds`, `managerIds` or `legalEntityIds`. As long as a timesheet is not submitted, its unique identifier is equal to zero.
     * @summary List due timesheets
     * @param {TimesheetsApiListDueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetsApiGenerated
     */
    public listDue(requestParameters: TimesheetsApiListDueRequest, options?: AxiosRequestConfig) {
        return TimesheetsApiFp(this.configuration).listDue(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
